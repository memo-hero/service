openapi: 3.0.0
info:
  title: MemoHero
  version: 1.0.0
servers:
  - url: 'http://localhost:8080'
  - url: 'http://192.168.100.75:8282'
tags:
  - name: User
  - name: Card
  - name: System
  - name: Study
paths:
  '/users/{user_id}':
    get:
      tags:
        - User
      summary: Get User By ID
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  stats:
                    type: object
                    properties:
                      health:
                        type: integer
                      categories:
                        type: object
                        properties:
                          ARTS:
                            type: object
                            properties:
                              level:
                                type: integer
                              exp:
                                type: integer
                              needed:
                                type: integer
                          COMPUTERS:
                            type: object
                            properties:
                              level:
                                type: integer
                              exp:
                                type: integer
                              needed:
                                type: integer
                          HISTORY:
                            type: object
                            properties:
                              level:
                                type: integer
                              exp:
                                type: integer
                              needed:
                                type: integer
                          LANGUAGES:
                            type: object
                            properties:
                              level:
                                type: integer
                              exp:
                                type: integer
                              needed:
                                type: integer
                          SCIENCE:
                            type: object
                            properties:
                              level:
                                type: integer
                              exp:
                                type: integer
                              needed:
                                type: integer
                      generalLevel:
                        type: integer
                x-examples:
                  Example 1:
                    id: user_id
                    stats:
                      health: 100
                      categories:
                        ARTS:
                          level: 1
                          exp: 1
                          needed: 75
                        COMPUTERS:
                          level: 1
                          exp: 0
                          needed: 75
                        HISTORY:
                          level: 1
                          exp: 0
                          needed: 75
                        LANGUAGES:
                          level: 1
                          exp: 0
                          needed: 75
                        SCIENCE:
                          level: 1
                          exp: 0
                          needed: 75
                      generalLevel: 1
              examples:
                Example 1:
                  value:
                    id: user_id
                    stats:
                      health: 100
                      categories:
                        ARTS:
                          level: 1
                          exp: 1
                          needed: 75
                        COMPUTERS:
                          level: 1
                          exp: 0
                          needed: 75
                        HISTORY:
                          level: 1
                          exp: 0
                          needed: 75
                        LANGUAGES:
                          level: 1
                          exp: 0
                          needed: 75
                        SCIENCE:
                          level: 1
                          exp: 0
                          needed: 75
                      generalLevel: 1
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                type: object
                properties: {}
              examples:
                Example 1:
                  value: User with id user_id was not found.
      description: Gets an user by its ID
    parameters:
      - schema:
          type: string
        name: user_id
        in: path
        description: Id of the user
        required: true
    put:
      summary: Update User
      operationId: put-users-user_id
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: object
                properties: {}
              examples:
                Example 1:
                  value: User with id f7868520-770d-455f-aeb8-d02793cf6278 was not found.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                stats:
                  type: object
                  properties:
                    categories:
                      type: object
                      properties:
                        ARTS:
                          type: object
                          properties:
                            exp:
                              type: integer
                            level:
                              type: integer
                        COMPUTERS:
                          type: object
                          properties:
                            exp:
                              type: integer
                            level:
                              type: integer
                        HISTORY:
                          type: object
                          properties:
                            exp:
                              type: integer
                            level:
                              type: integer
                        LANGUAGES:
                          type: object
                          properties:
                            exp:
                              type: integer
                            level:
                              type: integer
                        SCIENCE:
                          type: object
                          properties:
                            exp:
                              type: integer
                            level:
                              type: integer
                    health:
                      type: integer
              x-examples:
                Example 1:
                  stats:
                    categories:
                      ARTS:
                        exp: 1
                        level: 1
                      COMPUTERS:
                        exp: 0
                        level: 1
                      HISTORY:
                        exp: 0
                        level: 1
                      LANGUAGES:
                        exp: 0
                        level: 1
                      SCIENCE:
                        exp: 0
                        level: 1
                    health: 100
            examples:
              Example 1:
                value:
                  stats:
                    categories:
                      ARTS:
                        exp: 1
                        level: 1
                      COMPUTERS:
                        exp: 0
                        level: 1
                      HISTORY:
                        exp: 0
                        level: 1
                      LANGUAGES:
                        exp: 0
                        level: 1
                      SCIENCE:
                        exp: 0
                        level: 1
                    health: 100
        description: ''
      description: Updates an user by it's id
    post:
      summary: Create User
      operationId: post-users-user_id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  stats:
                    type: object
                    properties:
                      health:
                        type: integer
                      categories:
                        type: object
                        properties:
                          ARTS:
                            type: object
                            properties:
                              level:
                                type: integer
                              exp:
                                type: integer
                              needed:
                                type: integer
                          COMPUTERS:
                            type: object
                            properties:
                              level:
                                type: integer
                              exp:
                                type: integer
                              needed:
                                type: integer
                          HISTORY:
                            type: object
                            properties:
                              level:
                                type: integer
                              exp:
                                type: integer
                              needed:
                                type: integer
                          LANGUAGES:
                            type: object
                            properties:
                              level:
                                type: integer
                              exp:
                                type: integer
                              needed:
                                type: integer
                          SCIENCE:
                            type: object
                            properties:
                              level:
                                type: integer
                              exp:
                                type: integer
                              needed:
                                type: integer
                      generalLevel:
                        type: integer
                x-examples:
                  Example 1:
                    id: user_id
                    stats:
                      health: 100
                      categories:
                        ARTS:
                          level: 1
                          exp: 0
                          needed: 75
                        COMPUTERS:
                          level: 1
                          exp: 0
                          needed: 75
                        HISTORY:
                          level: 1
                          exp: 0
                          needed: 75
                        LANGUAGES:
                          level: 1
                          exp: 0
                          needed: 75
                        SCIENCE:
                          level: 1
                          exp: 0
                          needed: 75
                      generalLevel: 1
              examples:
                Example 1:
                  value:
                    id: user_id
                    stats:
                      health: 100
                      categories:
                        ARTS:
                          level: 1
                          exp: 0
                          needed: 75
                        COMPUTERS:
                          level: 1
                          exp: 0
                          needed: 75
                        HISTORY:
                          level: 1
                          exp: 0
                          needed: 75
                        LANGUAGES:
                          level: 1
                          exp: 0
                          needed: 75
                        SCIENCE:
                          level: 1
                          exp: 0
                          needed: 75
                      generalLevel: 1
      description: Creates a new user
  '/users/{user_id}/cards':
    post:
      tags:
        - Card
      summary: Create Card
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                front:
                  type: string
                back:
                  type: string
                category:
                  type: string
                tags:
                  type: array
                  items:
                    type: string
              x-examples:
                Example 1:
                  front: test front
                  back: test back
                  category: ARTS
                  tags:
                    - test2
                    - test4
            examples:
              Example 1:
                value:
                  front: test front
                  back: test back
                  category: ARTS
                  tags:
                    - tag 1
                    - tag 2
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  userId:
                    type: string
                  front:
                    type: string
                  back:
                    type: string
                  category:
                    type: string
                  tags:
                    type: array
                    items:
                      type: string
                  dueDate:
                    type: integer
                  studyMetadata:
                    type: object
                    properties:
                      repetition:
                        type: integer
                      easeFactor:
                        type: number
                      interval:
                        type: integer
                x-examples:
                  Example 1:
                    id: 302e6fa8-a03e-4505-9aa1-a9ed8fc748e6
                    userId: test2
                    front: test front
                    back: test back
                    category: ARTS
                    tags:
                      - test4
                      - test2
                    dueDate: 19416
                    studyMetadata:
                      repetition: 0
                      easeFactor: 2.5
                      interval: 0
              examples:
                Example 1:
                  value:
                    id: card_id
                    userId: test2
                    front: test front
                    back: test back
                    category: ARTS
                    tags:
                      - tag 1
                      - tag 2
                    dueDate: 19416
                    studyMetadata:
                      repetition: 0
                      easeFactor: 2.5
                      interval: 0
      description: Creates a new card for the given user
    parameters:
      - schema:
          type: string
        name: user_id
        in: path
        required: true
        description: Id of the user
    get:
      summary: Get user's cards
      operationId: get-users-user_id-cards
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    userId:
                      type: string
                    front:
                      type: string
                    back:
                      type: string
                    category:
                      type: string
                    tags:
                      type: array
                      items:
                        type: string
                    dueDate:
                      type: integer
                    studyMetadata:
                      type: object
                      properties:
                        repetition:
                          type: integer
                        easeFactor:
                          type: number
                        interval:
                          type: integer
                x-examples:
                  Example 1:
                    - id: f3d80e48-3890-41be-9834-a9880632e006
                      userId: test2
                      front: test front
                      back: test back
                      category: ARTS
                      tags:
                        - test4
                        - test2
                      dueDate: 19416
                      studyMetadata:
                        repetition: 0
                        easeFactor: 2.5
                        interval: 0
              examples:
                Example 1:
                  value:
                    - id: card_id
                      userId: user_id
                      front: test front
                      back: test back
                      category: ARTS
                      tags:
                        - tag 1
                        - tag 2
                      dueDate: 19416
                      studyMetadata:
                        repetition: 0
                        easeFactor: 2.5
                        interval: 0
      description: Get a user's cards
  '/users/{user_id}/cards/{card_id}':
    get:
      tags:
        - Card
      summary: Get Card By ID
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  userId:
                    type: string
                  front:
                    type: string
                  back:
                    type: string
                  category:
                    type: string
                  tags:
                    type: array
                    items:
                      type: string
                  dueDate:
                    type: integer
                  studyMetadata:
                    type: object
                    properties:
                      repetition:
                        type: integer
                      easeFactor:
                        type: number
                      interval:
                        type: integer
                x-examples:
                  Example 1:
                    id: 302e6fa8-a03e-4505-9aa1-a9ed8fc748e6
                    userId: test2
                    front: test front
                    back: test back
                    category: ARTS
                    tags:
                      - test4
                      - test2
                    dueDate: 19416
                    studyMetadata:
                      repetition: 0
                      easeFactor: 2.5
                      interval: 0
              examples:
                Example 1:
                  value:
                    id: card_id
                    userId: test2
                    front: test front
                    back: test back
                    category: ARTS
                    tags:
                      - tag 1
                      - tag 2
                    dueDate: 19416
                    studyMetadata:
                      repetition: 0
                      easeFactor: 2.5
                      interval: 0
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                type: object
                properties: {}
              examples:
                Example 1:
                  value: Card with id 302e6fa8-a03e-4505-9aa1-0a9ed8fc748e was not found.
      description: Gets a card by its ID
    put:
      tags:
        - Card
      summary: Update Card
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                userId:
                  type: string
                front:
                  type: string
                back:
                  type: string
                category:
                  type: string
                tags:
                  type: array
                  items:
                    type: string
                dueDate:
                  type: integer
                studyMetadata:
                  type: object
                  properties:
                    repetition:
                      type: integer
                    easeFactor:
                      type: number
                    interval:
                      type: integer
              x-examples:
                Example 1:
                  id: card_id
                  userId: test2
                  front: test front
                  back: test back
                  category: ARTS
                  tags:
                    - tag 1
                    - tag 2
                  dueDate: 19416
                  studyMetadata:
                    repetition: 0
                    easeFactor: 2.5
                    interval: 0
            examples:
              Example 1:
                value:
                  id: card_id
                  userId: test2
                  front: test front
                  back: test back
                  category: ARTS
                  tags:
                    - tag 1
                    - tag 2
                  dueDate: 19416
                  studyMetadata:
                    repetition: 0
                    easeFactor: 2.5
                    interval: 0
        description: ''
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
      description: Updates the given card
    parameters:
      - schema:
          type: string
        name: user_id
        in: path
        required: true
        description: Id of the user
      - schema:
          type: string
        name: card_id
        in: path
        required: true
        description: Id of the card
    delete:
      summary: Delete Card
      operationId: ''
      responses:
        '200':
          description: OK
      description: Deletes the given card
  '/users/{user_id}/cards/due':
    get:
      tags:
        - Card
      summary: Get Due Cards
      parameters: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    userId:
                      type: string
                    front:
                      type: string
                    back:
                      type: string
                    category:
                      type: string
                    tags:
                      type: array
                      items:
                        type: string
                    dueDate:
                      type: integer
                    studyMetadata:
                      type: object
                      properties:
                        repetition:
                          type: integer
                        easeFactor:
                          type: number
                        interval:
                          type: integer
                x-examples:
                  Example 1:
                    - id: card_id
                      userId: user_id
                      front: test front
                      back: test back
                      category: ARTS
                      tags:
                        - tag 1
                        - tag 2
                      dueDate: 19416
                      studyMetadata:
                        repetition: 0
                        easeFactor: 2.5
                        interval: 0
              examples:
                Example 1:
                  value:
                    - id: card_id
                      userId: user_id
                      front: test front
                      back: test back
                      category: ARTS
                      tags:
                        - tag 1
                        - tag 2
                      dueDate: 19416
                      studyMetadata:
                        repetition: 0
                        easeFactor: 2.5
                        interval: 0
      description: Gets all the due cards for the given user
    parameters:
      - schema:
          type: string
        name: user_id
        in: path
        required: true
        description: Id of the user
  /version:
    get:
      tags:
        - System
      summary: Version
      responses:
        '200':
          description: Successful response
          content:
            text/plain:
              examples:
                Example 1:
                  value: 1.0.0
      description: Gets the service version
  /healthz:
    get:
      tags:
        - System
      summary: Health Check
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              examples:
                Example 1:
                  value: {}
      description: Returns 200 if the service is up and running
  '/users/{user_id}/logs':
    post:
      tags:
        - System
      summary: Push Logs
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  timestamp:
                    type: integer
                  message:
                    type: string
                  source:
                    type: string
                  severity:
                    type: string
              x-examples:
                Example 1:
                  - timestamp: 1677632767765000000
                    message: app_version=1.1.0.0 User google-oauth2|117961574608013003821 logged in.
                    source: MEMOHERO_DESKTOP
                    severity: INFO
                  - timestamp: 1677632768353000000
                    message: app_version=1.1.0.0 Getting due cards from server...
                    source: MEMOHERO_DESKTOP
                    severity: INFO
                  - timestamp: 1677632828190000000
                    message: app_version=1.1.0.0 User google-oauth2|117961574608013003821 logged out.
                    source: MEMOHERO_DESKTOP
                    severity: INFO
                  - timestamp: 1677632828226000000
                    message: app_version=1.1.0.0 Pushing logs to server...
                    source: MEMOHERO_DESKTOP
                    severity: INFO
            examples:
              Example 1:
                value:
                  - timestamp: 1677632767765000000
                    message: app_version=1.1.0.0 User google-oauth2|117961574608013003821 logged in.
                    source: MEMOHERO_DESKTOP
                    severity: INFO
                  - timestamp: 1677632768353000000
                    message: app_version=1.1.0.0 Getting due cards from server...
                    source: MEMOHERO_DESKTOP
                    severity: INFO
                  - timestamp: 1677632828190000000
                    message: app_version=1.1.0.0 User google-oauth2|117961574608013003821 logged out.
                    source: MEMOHERO_DESKTOP
                    severity: INFO
                  - timestamp: 1677632828226000000
                    message: app_version=1.1.0.0 Pushing logs to server...
                    source: MEMOHERO_DESKTOP
                    severity: INFO
      parameters:
        - name: user_id
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
      description: Receives and stores the logs of a client application
  '/users/{user_id}/cards/{card_id}/study':
    post:
      tags:
        - Study
      summary: Study Card
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: {}
      parameters:
        - name: quality
          in: query
          schema:
            type: integer
          example: '4'
          description: The user's response for the card
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  didLevelUp:
                    type: boolean
                  didGetKnockedOut:
                    type: boolean
                  category:
                    type: object
                    properties:
                      ARTS:
                        type: object
                        properties:
                          level:
                            type: integer
                          exp:
                            type: integer
                          needed:
                            type: integer
                  userStats:
                    type: object
                    properties:
                      health:
                        type: integer
                      categories:
                        type: object
                        properties:
                          ARTS:
                            type: object
                            properties:
                              level:
                                type: integer
                              exp:
                                type: integer
                              needed:
                                type: integer
                          COMPUTERS:
                            type: object
                            properties:
                              level:
                                type: integer
                              exp:
                                type: integer
                              needed:
                                type: integer
                          HISTORY:
                            type: object
                            properties:
                              level:
                                type: integer
                              exp:
                                type: integer
                              needed:
                                type: integer
                          LANGUAGES:
                            type: object
                            properties:
                              level:
                                type: integer
                              exp:
                                type: integer
                              needed:
                                type: integer
                          SCIENCE:
                            type: object
                            properties:
                              level:
                                type: integer
                              exp:
                                type: integer
                              needed:
                                type: integer
                      generalLevel:
                        type: integer
                x-examples:
                  Example 1:
                    didLevelUp: false
                    didGetKnockedOut: false
                    category:
                      ARTS:
                        level: 1
                        exp: 10
                        needed: 75
                    userStats:
                      health: 100
                      categories:
                        ARTS:
                          level: 1
                          exp: 10
                          needed: 75
                        COMPUTERS:
                          level: 1
                          exp: 0
                          needed: 75
                        HISTORY:
                          level: 1
                          exp: 0
                          needed: 75
                        LANGUAGES:
                          level: 1
                          exp: 0
                          needed: 75
                        SCIENCE:
                          level: 1
                          exp: 0
                          needed: 75
                      generalLevel: 1
              examples:
                Example 1:
                  value:
                    didLevelUp: false
                    didGetKnockedOut: false
                    category:
                      ARTS:
                        level: 1
                        exp: 10
                        needed: 75
                    userStats:
                      health: 100
                      categories:
                        ARTS:
                          level: 1
                          exp: 10
                          needed: 75
                        COMPUTERS:
                          level: 1
                          exp: 0
                          needed: 75
                        HISTORY:
                          level: 1
                          exp: 0
                          needed: 75
                        LANGUAGES:
                          level: 1
                          exp: 0
                          needed: 75
                        SCIENCE:
                          level: 1
                          exp: 0
                          needed: 75
                      generalLevel: 1
        '404':
          description: Not Found
    parameters:
      - schema:
          type: string
        name: user_id
        in: path
        required: true
        description: Id of the user
      - schema:
          type: string
        name: card_id
        in: path
        required: true
        description: Id of the card
components:
  responses:
    test:
      description: Example response
      content:
        application/json:
          schema:
            properties:
              id:
                type: string
